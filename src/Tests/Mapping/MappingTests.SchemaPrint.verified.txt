schema {
  query: MappingQuery
}

scalar BigInt

scalar Byte

enum ComparisonGraph {
  contains
  endsWith
  equal
  greaterThan
  greaterThanOrEqual
  notIn
  in
  lessThan
  lessThanOrEqual
  like
  startsWith
}

enum Connector {
  AND
  OR
  and
  or
}

scalar Date

scalar DateTime

scalar DateTimeOffset

scalar Decimal

scalar Guid

scalar Long

type MappingChildGraph {
  parent: MappingParentGraph!
  id: ID!
  parentId: ID!
  property: String
}

type MappingParentGraph {
  children(id: ID, ids: [ID], orderBy: [OrderByGraph], where: [WhereExpressionGraph], skip: Int, take: Int): [MappingChildGraph!]!
  id: ID!
  property: String
}

type MappingQuery {
  child(id: ID, ids: [ID], orderBy: [OrderByGraph], where: [WhereExpressionGraph], skip: Int, take: Int): MappingChildGraph!
  children(id: ID, ids: [ID], orderBy: [OrderByGraph], where: [WhereExpressionGraph], skip: Int, take: Int): [MappingChildGraph!]!
  parent(id: ID, ids: [ID], orderBy: [OrderByGraph], where: [WhereExpressionGraph], skip: Int, take: Int): MappingParentGraph!
  parents(id: ID, ids: [ID], orderBy: [OrderByGraph], where: [WhereExpressionGraph], skip: Int, take: Int): [MappingParentGraph!]!
}

scalar Milliseconds

input OrderByGraph {
  path: String!
  descending: Boolean
}

scalar SByte

scalar Seconds

scalar Short

enum StringComparison {
  CURRENT_CULTURE
  CURRENT_CULTURE_IGNORE_CASE
  INVARIANT_CULTURE
  INVARIANT_CULTURE_IGNORE_CASE
  ORDINAL
  ORDINAL_IGNORE_CASE
}

scalar UInt

scalar ULong

scalar UShort

scalar Uri

input WhereExpressionGraph {
  path: String
  comparison: ComparisonGraph
  negate: Boolean
  case: StringComparison
  value: [String]
  connector: Connector
  groupedExpressions: [WhereExpressionGraph]
}
